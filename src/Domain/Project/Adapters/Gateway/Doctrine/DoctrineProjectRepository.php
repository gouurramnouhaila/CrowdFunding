<?php


namespace App\Domain\Project\Adapters\Gateway\Doctrine;


use App\Domain\Project\Entities\Project;
use App\Domain\Project\Adapters\Gateway\Doctrine\Project as ProjectDoctrine;

use App\Domain\Project\Entities\ProjectRepository;
use App\Domain\User\Adapters\Gateway\Doctrine\DoctrineProjectHolderRepository;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use phpDocumentor\Reflection\Types\Boolean;
use phpDocumentor\Reflection\Types\This;
use function Zenstruck\Foundry\factory;

class DoctrineProjectRepository extends ServiceEntityRepository implements ProjectRepository
{

    /**
     * @var DoctrineCategoryRepository
     */
    private DoctrineCategoryRepository $categoryRepository;

    /**
     * @var DoctrineProjectHolderRepository
     */
    private DoctrineProjectHolderRepository $projectHolderRepository;

    /**
     * DoctrineProjectRepository constructor.
     * @param ManagerRegistry $registry
     * @param DoctrineCategoryRepository $categoryRepository
     * @param DoctrineProjectHolderRepository $projectHolderRepository
     */
    public function __construct(ManagerRegistry $registry,DoctrineCategoryRepository $categoryRepository,DoctrineProjectHolderRepository $projectHolderRepository)
    {
        parent::__construct($registry, ProjectDoctrine::class);

        $this->categoryRepository = $categoryRepository;
        $this->projectHolderRepository = $projectHolderRepository;
    }

    /**
     * @inheritDoc
     */
    public function add(Project $p)
    {
        $category = $this->categoryRepository->find($p->getIdCatgeory());
        $projectHolder = $this->projectHolderRepository->find($p->getProjectHolderId());

        $project = new ProjectDoctrine($p->getTitle(),$p->getDescription(),$p->getPhoto(),$p->getVideo(),$p->getObjectiveFund(),$category, $projectHolder);

        $project->setStatus("pending");
        $this->getEntityManager()->persist($project);
        $this->getEntityManager()->flush();

    }

    /**
     * @inheritDoc
     */
    public function delete(int $id)
    {
        $query = $this->getEntityManager()->createQuery('DELETE FROM \App\Domain\Project\Adapters\Gateway\Doctrine\Project p WHERE p.id = :id');
        $query->setParameter('id', $id);

        $query->execute();


        if ($query->execute() == 0) {
            return true;
        }
        else return false;
    }

    /**
     * @inheritDoc
     */
    public function update(Project $project): ProjectDoctrine
    {
        $projectDoctrine = $this->find($project->getId());
        $category = $this->categoryRepository->find($project->getIdCatgeory());


        $projectDoctrine->setTitle($project->getTitle());
        $projectDoctrine->setDescription($project->getDescription());
        $projectDoctrine->setPhoto($project->getPhoto());
        $projectDoctrine->setVideo($project->getVideo());
        $projectDoctrine->setObjectiveFund($project->getObjectiveFund());
        $projectDoctrine->setCategory($category);


       $this->getEntityManager()->flush();

       return $projectDoctrine;
    }

    public function find($id, $lockMode = null, $lockVersion = null)
    {
         return parent::find($id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function accept(Project $project)
    {
        $project = $this->find($project->getId());

        $project->setStatus('accepted');

        $this->getEntityManager()->persist($project);
        $this->getEntityManager()->flush();
    }

    /**
     * @inheritDoc
     */
    public function reject(Project $project)
    {
        $project = $this->find($project->getId());

        $project->setStatus('refused');

        $this->getEntityManager()->persist($project);
        $this->getEntityManager()->flush();

    }

   public function search(string $keyword)
   {
        return $this->findOneBy(['title' => $keyword]);
   }
}